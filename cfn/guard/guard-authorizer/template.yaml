AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  Region:
    Type: String
    Default: ane1

  EnvironmentPrefix:
    Type: String
    Default: dev-with-wxtech

  EnvironmentName:
    Type: String
    Default: dev-with-wxtech-template

  CategoryName:
    Type: String
    Default: guard

  AppName:
    Type: String
    Default: guard-authorizer

  DeploymentPreference:
    Type: String
    Default: AllAtOnce

  LogLevel:
    Type: String
    Default: debug

  Timeout:
    Type: Number
    Default: 30

Globals:
  Function:
    Runtime: python3.8
    Handler: app.lambda_function.lambda_handler
    Timeout: !Ref Timeout
    AutoPublishAlias: live
    Layers:
      - arn:aws:lambda:ap-northeast-1:475582256308:layer:env-infra-lib-layer-common:4
    VpcConfig:
      SecurityGroupIds:
        - {"Fn::ImportValue": !Sub "${EnvironmentName}-infra-security-SecurityGroup"}
      SubnetIds:
        - !ImportValue ibaws-az-ibaws-system-vpc-Private0
        - !ImportValue ibaws-az-ibaws-system-vpc-Private1
        - !ImportValue ibaws-az-ibaws-system-vpc-Private2
    Environment:
      Variables:
        LOG_LEVEL: !Ref LogLevel
        POWERTOOLS_SERVICE_NAME: !Sub ${EnvironmentName}-${AppName}
        POWERTOOLS_LOGGER_LOG_EVENT: true

Resources:
  Function:
    Type: AWS::Serverless::Function
    Properties:
      Role: {"Fn::ImportValue": !Sub "${EnvironmentName}-infra-security-LambdaRole"}
      MemorySize: 1024
      CodeUri: src/jwt
      DeploymentPreference:
        Enabled: true
        Type: !Ref DeploymentPreference
        Alarms:
          - !Ref FunctionErrorsAlarm
      Layers:
        - !Ref Layer
      Environment:
        Variables:
          AUTH0_ISSUER: !Sub 'https://{{resolve:ssm:/${EnvironmentName}/infra-resource/auth0/domain}}/'
          AUTH0_AUDIENCE: !Sub '{{resolve:ssm:/${EnvironmentName}/infra-resource/auth0/identifier}}'
          USER_TABLE_NAME: !Sub ${EnvironmentName}-store-user

  FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Function}
      RetentionInDays: 90

  FunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: {"Fn::ImportValue": !Sub "${EnvironmentName}-alert-slack-Function"}
      FilterPattern: '?"\"level\":\"CRITICAL\"" ?"\"level\":\"ERROR\"" ?"\"level\":\"WARNING\""'
      LogGroupName: !Ref FunctionLogGroup

  FunctionErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref Function
        - Name: Resource
          Value: !Sub
            - ${Function}:${Version}
            - Version: !GetAtt Function.Version.Version
      Statistic: Sum
      Period: 60
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      TreatMissingData: notBreaching

  Layer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${EnvironmentName}-${AppName}
      ContentUri: src/layer
      CompatibleRuntimes:
        - python3.8
      CompatibleArchitectures:
        - x86_64
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

Outputs:
  Function:
    Value: !Sub
      - ${Function}:live
      - Function: !GetAtt Function.Arn
    Export:
      Name: !Sub ${EnvironmentName}-${AppName}-Function
