<template>
  <div class="tableplane">
    <EasyDataTable
      v-model:items-selected="itemsSelected"
      show-index
      :headers="headers"
      :items="items"
    >
      <template #item-operation="item">
        <div class="operation-wrapper">
          <img
            src="../images/delete.png"
            class="operation-icon"
            @click="deleteItem(item)"
          >
          <img
            src="../images/edit.png"
            class="operation-icon"
            @click="editItem(item)"
          >
        </div>
      </template>
    </EasyDataTable>
    <div
      v-if="isEditing"
      class="edit-item"
    >
      height:<input
        v-model="editingItem.height"
        type="text"
      >
      <br>
      weight:<input
        v-model="editingItem.weight"
        type="text"
      >
      <br>
      <button @click="submitEdit">
        ok
      </button>
    </div>
    <div>{{ itemsSelected }}</div>
  </div>
</template>

<script setup>
import { ref, reactive, onMounted, defineProps, watch, toRefs } from 'vue'
import EasyDataTable from 'vue3-easy-data-table'
import 'vue3-easy-data-table/dist/style.css'

const props = defineProps({
  customerId: { type: String, default: '' },
  errmVessels: { type: Object, default: () => {} }
})

const { errmVessels } = toRefs(props)
// watch(() => props.custtomerId, (newValue) => {
watch(errmVessels, (newValue) => {
  console.log('Table draw Handler')
  console.log(newValue)
  createTable(newValue)
})

// Create Table
const headers = ref([])
const items = ref([])
const itemsSelected = ref([])
const isEditing = ref(false)
const editingItem = reactive({
  height: '',
  weight: 0,
  id: 0
})
const deleteItem = (val) => {
  items.value = items.value.filter((item) => item.id !== val.id)
}
const editItem = (val) => {
  isEditing.value = true
  const { height, weight, id } = val
  editingItem.height = height
  editingItem.weight = weight
  editingItem.id = id
}
const submitEdit = () => {
  isEditing.value = false
  const item = items.value.find((item) => item.id === editingItem.id)
  item.height = editingItem.height
  item.weight = editingItem.weight
}

const createTable = (errmVessels) => {
  console.log('create table')
  console.log(errmVessels)
  for (let i = 0; i < errmVessels.length; i++) {
    const latest = errmVessels[i].latest
    // console.log(latest.vessel_name)
    const tmpRaw = {
      id: i,
      vessel_name: latest.vessel_name,
      service_type: latest.service_type,
      risk: '',
      laden_ballast: latest.loading_condition,
      priority: latest.voyage_priority,
      atd: latest.dep_time_utc,
      arrival_port: latest.arr_port,
      eta: latest.arr_time_utc,
      rta: latest.req_arr_time_utc,
      speed: latest.average_speed,
      ordered_speed: latest.ordered_speed,
      rpm: latest.average_rpm,
      suggested_rpm: latest.suggested_rpm,
      total_foc: latest.total_foc,
      ordered_foc: latest.ordered_foc,
      total_dogo: latest.total_dogo,
      ordered_dogo: latest.ordered_dogo
    }
    items.value.push(tmpRaw)
  }
}

// Table headers
headers.value = [
  { text: 'Vessel name', value: 'vessel_name' },
  { text: 'Service type', value: 'service_type' },
  { text: 'Risk', value: 'risk' },
  { text: 'L/B', value: 'laden_ballast' },
  { text: 'Priority', value: 'priority' },
  { text: 'ATD', value: 'atd', sortable: true },
  { text: 'Arriva port', value: 'arrival_port' },
  { text: 'ETA', value: 'eta' },
  { text: 'RTA', value: 'rta' },
  { text: 'Speed', value: 'speed' },
  { text: 'Ordered Speed', value: 'ordered_speed', sortable: true },
  { text: 'RPM', value: 'rpm' },
  { text: 'Suggested RPM', value: 'suggested_rpm' },
  { text: 'Total FOC', value: 'total_foc' },
  { text: 'Ordered FOC', value: 'ordered_foc', sortable: true },
  { text: 'Total DO/GO', value: 'total_dogo' },
  { text: 'Ordered DO/GO', value: 'ordered_dogo', sortable: true },
  { text: 'Operation', value: 'operation' }
]

</script>

<style>
.operation-wrapper .operation-icon {
  width: 20px;
  cursor: pointer;
}
</style>
